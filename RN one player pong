import React, { Component } from 'react';
import {
  Animated,
  Button,
  Easing,
  Slider,
  View,
  StyleSheet,
} from 'react-native';
import { Constants } from 'expo';

const wall = 186;
const speedSetting = 3;

export default class App extends Component {
  constructor() {
    super();
    this.state = {
      vec: new Animated.ValueXY({ x: 75, y: 100 }),
      aldX: 100,
      oldY: 100,
      lastX: 100,
      lastY: 100,
      deltaX: 1,
      deltaY: 1.3,
      next: { x: 200, y: 160 },
      speed: 500,
      podX: 100,
      boxColor: 'black',
    };
  }
  render() {
    return (
      <View style={styles.container}>
        <View
          style={{
            borderWidth: 2,
            borderColor: this.state.boxColor,
            height: 200,
            width: 200,
          }}>
          <Animated.View
            style={{
              position: 'absolute',
              height: 10,
              width: 10,
              borderColor: 'black',
              borderWidth: 2,
              top: this.state.vec.y,
              left: this.state.vec.x,
            }}
          />
          <View
            style={{
              position: 'absolute',
              height: 5,
              width: 40,
              borderColor: 'red',
              borderWidth: 2,
              top: 195,
              left: this.state.podX,
            }}
          />
        </View>
        <View style={{ width: 200 }}>
          <Slider
            step={1}
            maximumValue={156}
            minumumValue={0}
            onValueChange={this.change.bind(this)}
          />
        </View>
        <Button title="start" onPress={() => this.start()} />
      </View>
    );
  }
  start() {
    this.setState({
      vec: new Animated.ValueXY({ x: 75, y: 100 }),
      aldX: 100,
      oldY: 100,
      lastX: 100,
      lastY: 100,
      deltaX: 1,
      deltaY: 1.3,
      next: { x: 200, y: 160 },
      speed: 500,
      podX: 100,
      boxColor: 'black',
    });
    this.bounce({ x: 0, y: 85 });
  }
  change(value) {
    this.setState(() => {
      return {
        podX: parseFloat(value),
      };
    });
  }
  endGame() {
    this.setState({ boxColor: 'red' });
    Animated.timing(this.state.vec).stop();
  }
  bounce(nextXY) {
    this.setState({
      oldX: this.state.lastX,
      oldY: this.state.lastY,
      lastX: nextXY.x,
      lastY: nextXY.y,
    });
    var newDeltaY = this.state.deltaY;
    var newDeltaX = this.state.deltaX;
    const startX = nextXY.x;
    const startY = nextXY.y;
    const velocity = this.state.speed;

    if (startX == 0 || startX == wall) {
      newDeltaX -= newDeltaX * 2;
    }
    if (startY == 0 || startY == wall) {
      newDeltaY -= newDeltaY * 2;
    }
    var newX = startX;
    var newY = startY;
    for (var i = 0; i < 500; i++) {
      newX += newDeltaX;
      newY += newDeltaY;
      if (newY < 0) {
        newY = 0;
        break;
      }
      if (newY > wall) {
        newY = wall;
        break;
      }
      if (newX > wall) {
        newX = wall;
        break;
      }
      if (newX < 0) {
        newX = 0;
        break;
      }
    }
    var distance = Math.abs(newX - startX) + Math.abs(newY - startY);
    var nextSpeed = distance * speedSetting;
    this.setState({
      deltaX: newDeltaX,
      deltaY: newDeltaY,
      lastX: newX,
      lastY: newY,
      speed: nextSpeed,
    });

    Animated.timing(this.state.vec, {
      toValue: { x: nextXY.x, y: nextXY.y },
      duration: velocity,
      easing: Easing.linear,
    }).start(() =>
      this.test(this.state.oldX, this.state.oldY, { x: newX, y: newY })
    );
  }
  test = (x, y, next) => {
    if (y == wall) {
      var podX = this.state.podX;
      if (x < podX || x - podX > 40) {
        this.endGame();
      } else {
        this.bounce({ x: next.x, y: next.y });
      }
    } else {
      this.bounce({ x: next.x, y: next.y });
    }
  };
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
  },
});
