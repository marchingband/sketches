import React, { Component } from 'react';
import { Dimensions, PanResponder, Text, TouchableOpacity, View, StyleSheet } from 'react-native';

const window = Dimensions.get('window');

class Square extends Component {
  render(){
  const {color,pan,active,id,pressSquare}=this.props
  const panX = pan.x
  const panY = pan.y
  const border = active ? 'red' : 'black'
  const textColor = color=='white' || color=='black' ? color : 'grey'
  const scale = active ? 1.5 : 1
  const backgroundColor = active ? 'orange' : 'grey'
  const zIndex = active ? 2 : 1
    return (
      <View style={[styles.square, 
                  {zIndex:zIndex}, 
                  {backgroundColor:backgroundColor}, 
                  {borderColor:border},
                  {transform:[
                      {translateX:panX},
                      {translateY:panY},
                      {scaleX:scale},
                      {scaleY:scale}
                    ]}
                  ]}
      >
        <Text style={{color:textColor}}>{id}</Text>
      </View>
    )
  }
}

class Row extends Component {
  render(){
    return(
      <View style={styles.row}>
        {this.props.children}
      </View>
    )
  }
}

class Board extends Component {
  render(){
    const {board} = this.props
    return(
      <View style={styles.board}>
        {this._renderBoard(board)}
      </View>
    )
  }
  _renderBoard=(board)=>{
    const {pressSquare}=this.props
    var rows=[]
    for(var i=0;i<8;i++){
      var row = []
      for(var j=0;j<8;j++){
        const num=i*8+j+1
        row.push(<Square color={board[num].color} pan={board[num].pan} key={num} id={board[num].id} active={board[num].active} />)
      }
      rows.push(<Row key={i} > {row}</Row>)
    }
    return rows
  }
}
export default class App extends Component {
  constructor() {
    super()
    this.state={
      board:{1:{pan:{x:0,y:0},active:false,id:'Ro',color:'black'}, 2:{pan:{x:0,y:0},active:false,id:'Ni',color:'black'}, 3:{pan:{x:0,y:0},active:false,id:'Bi',color:'black'}, 4:{pan:{x:0,y:0},active:false,id:"Qu",color:'black'}, 5:{pan:{x:0,y:0},active:false,id:'Ki',color:'black'}, 6:{pan:{x:0,y:0},active:false,id:'Bi',color:'black'}, 7:{pan:{x:0,y:0},active:false,id:'Ni',color:'black'}, 8:{pan:{x:0,y:0},active:false,id:'Ro',color:'black'},  
             9:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},10:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},11:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},12:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},13:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},14:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},15:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},16:{pan:{x:0,y:0},active:false,id:'Pa',color:'black'},
            17:{pan:{x:0,y:0},active:false,id:17},  18:{pan:{x:0,y:0},active:false,id:18},  19:{pan:{x:0,y:0},active:false,id:19},  20:{pan:{x:0,y:0},active:false,id:20},  21:{pan:{x:0,y:0},active:false,id:21},  22:{pan:{x:0,y:0},active:false,id:22},  23:{pan:{x:0,y:0},active:false,id:23},  24:{pan:{x:0,y:0},active:false,id:24},
            25:{pan:{x:0,y:0},active:false,id:25},  26:{pan:{x:0,y:0},active:false,id:26},  27:{pan:{x:0,y:0},active:false,id:27},  28:{pan:{x:0,y:0},active:false,id:28},  29:{pan:{x:0,y:0},active:false,id:29},  30:{pan:{x:0,y:0},active:false,id:30},  31:{pan:{x:0,y:0},active:false,id:31},  32:{pan:{x:0,y:0},active:false,id:32},
            33:{pan:{x:0,y:0},active:false,id:33},  34:{pan:{x:0,y:0},active:false,id:34},  35:{pan:{x:0,y:0},active:false,id:35},  36:{pan:{x:0,y:0},active:false,id:36},  37:{pan:{x:0,y:0},active:false,id:37},  38:{pan:{x:0,y:0},active:false,id:38},  39:{pan:{x:0,y:0},active:false,id:39},  40:{pan:{x:0,y:0},active:false,id:40},
            41:{pan:{x:0,y:0},active:false,id:41},  42:{pan:{x:0,y:0},active:false,id:42},  43:{pan:{x:0,y:0},active:false,id:43},  44:{pan:{x:0,y:0},active:false,id:44},  45:{pan:{x:0,y:0},active:false,id:45},  46:{pan:{x:0,y:0},active:false,id:46},  47:{pan:{x:0,y:0},active:false,id:47},  48:{pan:{x:0,y:0},active:false,id:48},
            49:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},50:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},51:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},52:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},53:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},54:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},55:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},56:{pan:{x:0,y:0},active:false,id:'Pa',color:'white'},
            57:{pan:{x:0,y:0},active:false,id:'Ro',color:'white'},58:{pan:{x:0,y:0},active:false,id:'Ni',color:'white'},59:{pan:{x:0,y:0},active:false,id:'Bi',color:'white'},60:{pan:{x:0,y:0},active:false,id:'Qu',color:'white'},61:{pan:{x:0,y:0},active:false,id:'Ki',color:'white'},62:{pan:{x:0,y:0},active:false,id:'Bi',color:'white'},63:{pan:{x:0,y:0},active:false,id:'Ni',color:'white'},64:{pan:{x:0,y:0},active:false,id:'Ro',color:'white'}},
      touch:0,
      pan:{x:0,y:0},
    }
  }
  panResponder = {}

  componentWillMount() {
    this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder,
      onPanResponderGrant: this.handlePanResponderGrant,
      onPanResponderMove: this.handlePanResponderMove,
      onPanResponderRelease: this.handlePanResponderEnd,
      onPanResponderTerminate: this.handlePanResponderEnd,
    })
  }
  handleStartShouldSetPanResponder=(e,gestureState)=>{
    return true
  }
  handlePanResponderGrant=(e,gestureState)=>{
    const touch=this.findSquareAt(gestureState.x0,gestureState.y0)
    var board = this.state.board
    if(touch>0 && touch<65){
      board[touch].active=true
      this.setState({board,touch})
    }
  }
  handlePanResponderMove=(e,gestureState)=>{
    const panX = gestureState.dx
    const panY = gestureState.dy
    const pan = {x:panX,y:panY}
    this.setState({pan})
    this.moveSelected()
  }
  handlePanResponderEnd=(e,gestureState)=>{
    const touch=this.findSquareAt(gestureState.x0,gestureState.y0)
    const {board} = this.state
    if(touch>0 && touch<65){
      board[touch].active=false
      board[touch].pan={x:0,y:0}
    }
    this.setState({pan:{x:0,y:0}})
  }
  findSquareAt(x,y){
      const side = window.width/8
      const sX = Math.floor(x/side)
      const sY = Math.floor(y/side)-1
      return (sX+sY*8)+1
  }
  moveSelected=()=>{
    const {pan,touch,board} = this.state
    board[touch].pan=pan
  }
  render() {
    return (
      <View style={styles.container}>
        <View {...this.panResponder.panHandlers} style={styles.board}  >
        <Board  board={this.state.board} pressSquare={this.pressSquare}/>
        </View>
        <Text>{this.state.touch}  {this.state.pan.x}  {this.state.pan.y}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container:{
    width:window.width,
    height:window.height,
  },
  board: {
    marginTop:22,
    flexDirection:'column',
    width:window.width,
    height:window.width,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'grey',
  },
  row:{
    flex:1,
    width:window.width,
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
  },
  square:{
    flex:1,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'stretch',
    borderWidth:0.5
  }
});
