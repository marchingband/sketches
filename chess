import React, { Component } from 'react';
import { Dimensions, PanResponder, Text, TouchableOpacity, View, StyleSheet } from 'react-native';

const window = Dimensions.get('window');

class Square extends Component {
  render(){
  const{active,id,pressSquare}=this.props
  const border = active ? 'red' : 'black'
    return (
      <View style={[styles.square,{borderColor:border}]}>
        <Text>{id}</Text>
      </View>
    )
  }
}

class Row extends Component {
  render(){
    return(
      <View style={styles.row}>
        {this.props.children}
      </View>
    )
  }
}

class Board extends Component {
  render(){
    const {board} = this.props
    return(
      <View style={styles.board}>
        {this._renderBoard(board)}
      </View>
    )
  }
  _renderBoard=(board)=>{
    const {pressSquare}=this.props
    var rows=[]
    for(var i=0;i<8;i++){
      var row = []
      for(var j=0;j<8;j++){
        const num=i*8+j+1
        row.push(<Square key={board[num].id} id={board[num].id} active={board[num].active} />)
      }
      rows.push(<Row key={i} > {row}</Row>)
    }
    return rows
  }
}
export default class App extends Component {
  constructor() {
    super()
    this.state={
      board:{1:{active:false,id:1},  2:{active:false,id:2},  3:{active:false,id:3},  4:{active:false,id:4},  5:{active:false,id:5},  6:{active:false,id:6},  7:{active:false,id:7},  8:{active:false,id:8},  
             9:{active:false,id:9}, 10:{active:false,id:10},11:{active:false,id:11},12:{active:false,id:12},13:{active:false,id:13},14:{active:false,id:14},15:{active:false,id:15},16:{active:false,id:16},
            17:{active:false,id:17},18:{active:false,id:18},19:{active:false,id:19},20:{active:false,id:20},21:{active:false,id:21},22:{active:false,id:22},23:{active:false,id:23},24:{active:false,id:24},
            25:{active:false,id:25},26:{active:false,id:26},27:{active:false,id:27},28:{active:false,id:28},29:{active:false,id:29},30:{active:false,id:30},31:{active:false,id:31},32:{active:false,id:32},
            33:{active:false,id:33},34:{active:false,id:34},35:{active:false,id:35},36:{active:false,id:36},37:{active:false,id:37},38:{active:false,id:38},39:{active:false,id:39},40:{active:false,id:40},
            41:{active:false,id:41},42:{active:false,id:42},43:{active:false,id:43},44:{active:false,id:44},45:{active:false,id:45},46:{active:false,id:46},47:{active:false,id:47},48:{active:false,id:48},
            49:{active:false,id:49},50:{active:false,id:50},51:{active:false,id:51},52:{active:false,id:52},53:{active:false,id:53},54:{active:false,id:54},55:{active:false,id:55},56:{active:false,id:56},
            57:{active:false,id:57},58:{active:false,id:58},59:{active:false,id:59},60:{active:false,id:60},61:{active:false,id:61},62:{active:false,id:62},63:{active:false,id:63},64:{active:false,id:64}},
      touch:0,
    }
  }
  panResponder = {}

  componentWillMount() {
    this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder,
      onPanResponderGrant: this.handlePanResponderGrant,
      onPanResponderMove: this.handlePanResponderMove,
      onPanResponderRelease: this.handlePanResponderEnd,
      onPanResponderTerminate: this.handlePanResponderEnd,
    })
  }
  handleStartShouldSetPanResponder=(e,gestureState)=>{
    return true
  }
  handlePanResponderGrant=(e,gestureState)=>{
    const touch=this.findSquareAt(gestureState.x0,gestureState.y0)
    var board = this.state.board
    if(touch>0 && touch<65){
      board[touch].active=true
      this.setState({board,touch})
    }
  }
  handlePanResponderMove=(e,gestureState)=>{
  }
  handlePanResponderEnd=(e,gestureState)=>{
    const touch=this.findSquareAt(gestureState.x0,gestureState.y0)
    var board = this.state.board
    if(touch>0 && touch<65){
      board[touch].active=false
      this.setState({board})
    }
  }
  findSquareAt(x,y){
      const side = window.width/8
      const sX = Math.floor(x/side)
      const sY = Math.floor(y/side)-1
      return (sX+sY*8)+1
  }
  render() {
    return (
      <View style={styles.container}>
        <View {...this.panResponder.panHandlers} style={styles.board}  >
        <Board  board={this.state.board} pressSquare={this.pressSquare}/>
        </View>
        <Text>{this.state.touch}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container:{
    width:window.width,
    height:window.height,
  },
  board: {
    marginTop:22,
    flexDirection:'column',
    width:window.width,
    height:window.width,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'grey',
  },
  row:{
    flex:1,
    width:window.width,
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
  },
  square:{
    flex:1,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'stretch',
    borderWidth:0.5
  }
});
