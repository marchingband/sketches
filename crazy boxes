import React, { Component } from 'react';
import { Animated, Easing, View, StyleSheet } from 'react-native';

class BoxOfBoxes extends Component {
  render() {
    const { size, parentSize, dif, numBoxes } = this.props;
    if (numBoxes > 0) {
      return (
        <Box size={size} wall={parentSize}>
          <BoxOfBoxes
            size={size - dif}
            parentSize={size}
            dif={dif}
            numBoxes={numBoxes - 1}
          />
        </Box>
      );
    } else {
      return <Box size={size} wall={parentSize} />;
    }
  }
}

class Box extends Component {
  constructor(props) {
    super(props);
    const { wall, size } = this.props;
    this.state = {
      colors: ['red', 'blue', 'green', 'orange', 'black', 'yellow'],
      colorIndex: 0,
      vec: new Animated.ValueXY({ x: 0, y: 10 }),
      wall: wall - size,
    };
  }
  componentDidMount() {
    const { wall } = this.state;
    Animated.timing(this.state.vec, {
      toValue: { x: wall / 2, y: wall },
      duration: 1000,
      easing: Easing.linear,
    }).start(() => {
      this.bounce({ x: wall / 2, y: wall / 3 }, 1, 1.3);
    });
  }
  nextColor() {
    var newColorIndex = this.state.colorIndex;
    newColorIndex < 5 ? (newColorIndex += 1) : (newColorIndex = 0);
    this.setState({ colorIndex: newColorIndex });
  }
  start = () => {
    Animated.timing(this.state.vec, {
      toValue: { x: 90, y: this.state.wall },
      duration: 1000,
      easing: Easing.linear,
    }).start(() => {
      this.bounce({ x: this.props.wall / 2, y: this.state.wall }, 1, 1.3);
    });
  };
  bounce = (XY, deltaX, deltaY) => {
    const { size } = this.props;
    this.nextColor();
    var newX = XY.x;
    var newY = XY.y;
    var newDeltaY = deltaY;
    var newDeltaX = deltaX;
    if (XY.x == 0 || XY.x == this.state.wall) {
      newDeltaX -= newDeltaX * 2;
    }
    if (XY.y == 0 || XY.y == this.state.wall) {
      newDeltaY -= newDeltaY * 2;
    }
    for (var i = 0; i < 500; i++) {
      newX += newDeltaX;
      newY += newDeltaY;
      if (newX < 0) {
        newX = 0;
        break;
      }
      if (newX > this.state.wall) {
        newX = this.state.wall;
        break;
      }
      if (newY < 0) {
        newY = 0;
        break;
      }
      if (newY > this.state.wall) {
        newY = this.state.wall;
        break;
      }
    }
    const distance = Math.abs(XY.x - newX) + Math.abs(XY.y - newY);
    const newDuration = distance * 10 - size;
    Animated.timing(this.state.vec, {
      toValue: { x: newX, y: newY },
      duration: newDuration,
      easing: Easing.linear,
    }).start(() => {
      this.bounce({ x: newX, y: newY }, newDeltaX, newDeltaY);
    });
  };
  render() {
    return (
      <Animated.View
        style={{
          position: 'absolute',
          width: this.props.size,
          height: this.props.size,
          top: this.state.vec.y,
          left: this.state.vec.x,
          borderWidth: 1,
          borderColor: this.state.colors[this.state.colorIndex],
        }}>
        {this.props.children}
      </Animated.View>
    );
  }
}

export default class App extends Component {
  render() {
    return (
      <View style={styles.container}>
        <BoxOfBoxes size={340} parentSize={350} dif={30} numBoxes={11} />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 20,
    backgroundColor: '#ecf0f1',
    width: 350,
    height: 350,
  },
});
